# TMUX.CONF
# =========

# =========
# Variables
# =========
set -g @conf_dir "~/.config/tmux"
set -gF @conf_file "#{@conf_dir}/tmux.conf"
set -gF @plugins_dir "#{@conf_dir}/plugins"
set -g @scripts_dir "~/.local/bin"

# =======================
# Aesthetic configuration
# =======================
  # -----
  # Theme
  # -----
    source -F "#{@conf_dir}/theme.conf"
  # ----------
  # Status bar
  # ----------
    set -g status-position top
  # ------------
  # Window title
  # ------------
    set -g automatic-rename on
    set -g set-titles on
    set -g set-titles-string "#{session_name}:#{window_index}:#{window_name}"
  # ------------------
  # True-color support
  # ------------------
    set -g default-terminal "tmux-256color"
    set -ga terminal-overrides ",xterm-256color:RGB"
  # ----------
  # Undercurls
  # ----------
    set -ga terminal-overrides ',*:Smulx=\E[4::%p1%dm'
    set -ga terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# ======================
# Terminal configuration
# ======================
  # -----------------------
  # Clipboard configuration
  # -----------------------
    set -g set-clipboard on
  # -------------------
  # Mouse configuration
  # -------------------
    set -g mouse on
  # --------------------
  # Timing configuration
  # --------------------
    set -g repeat-time 400
  # -----------
  # Escape time
  # -----------
    set -g escape-time 0
  # ------------------------------------------
  # Allow terminal escape sequence passthrough
  # ------------------------------------------
    set -g allow-passthrough on
  # -------------------
  # Enable extended keys
  # -------------------
    set -g extended-keys on
    set -ga terminal-features ',xterm-ghostty:extkeys'
  # -----------------------------
  # Restore <HOME> and <END> keys
  # -----------------------------
    # See https://stackoverflow.com/a/55616731
    bind -n Home { send Escape "OH"; }
    bind -n End { send Escape "OF"; }

# =========================
# Multiplexor configuration
# =========================
  # --------------------
  # Window configuration
  # --------------------
    # Start window numbering at 1
    set -g base-index 1
    # Start pane numbering at 1
    set -g pane-base-index 1
    # Renumber windows when a window is closed
    set -g renumber-windows on
  # ----------------------
  # Activity configuration
  # ----------------------
    set -g monitor-activity on
    set -g visual-activity off
    set -g bell-action none
    set -g visual-bell off
    set -g visual-silence off
  # ---------------------
  # Session configuration
  # ---------------------
    set -g detach-on-destroy off

# ============
# Key Bindings
# ============
  # ------
  # Prefix
  # ------
    set -g prefix None
  # -------------------
  # Enable VIM keybinds
  # -------------------
    set -g mode-keys vi
    set -g status-keys vi
  # --------------------
  # NORMAL mode keybinds
  # --------------------
    # Reload configuration
    bind -n M-r { source -F "#{@conf_file}"; display "Configuration reloaded..."; }
    # Move between windows
    bind -n M-[ { previous-window; }
    bind -n M-] { next-window; }
    bind -n M-\{ { previous-window; }
    bind -n M-\} { next-window; }
    # Go to window by number
    bind -n M-1 { select-window -t 1; }
    bind -n M-2 { select-window -t 2; }
    bind -n M-3 { select-window -t 3; }
    bind -n M-4 { select-window -t 4; }
    bind -n M-5 { select-window -t 5; }
    bind -n M-6 { select-window -t 6; }
    bind -n M-7 { select-window -t 7; }
    bind -n M-8 { select-window -t 8; }
    bind -n M-9 { select-window -t 9; }
    # Choose a session
    bind -n M-C-s { choose-tree -s -Z; }
    bind -n M-s { run "#{@scripts_dir}/choose-session.sh"; }
    # Create a new pane
    bind -n M-n { run "#{@scripts_dir}/tmux-auto-split.sh -c '#{pane_current_path}'"; }
    bind -n M-N { run "#{@scripts_dir}/tmux-auto-split.sh -c '#{pane_current_path}'"; }
    # Zoom into pane
    bind -n M-z { resize-pane -Z; }
    # Close the current pane
    bind -n M-q { kill-pane; }
    # Enter command mode
    bind -n M-: { command-prompt; }
    # Open scratch popup window
    bind -n M-i { popup -E -d "#{pane_current_path}"; }
    bind -n M-g { popup -E -d "#{pane_current_path}" lazygit; }
    bind -n M-o { popup -E -d "#{pane_current_path}" opencode; }
  # -----------------
  # Vim-like keybinds
  # -----------------
    bind -n C-w if -F "#{@pane-is-vim}" { send C-w; } { switch-client -Tvim; }
    bind -Tvim w { send C-w; }
    bind -Tvim h { select-pane -L; }
    bind -Tvim j { select-pane -D; }
    bind -Tvim k { select-pane -U; }
    bind -Tvim l { select-pane -R; }
    bind -Tvim s { split-pane -v -c "#{pane_current_path}"; }
    bind -Tvim v { split-pane -h -c "#{pane_current_path}"; }
  # ------------------
  # Pane mode keybinds
  # ------------------
    bind -n M-w { switch-client -Tpane; }
    # Move between panes with arrows
    bind -Tpane Left { select-pane -L; switch-client -Tpane; }
    bind -Tpane Up { select-pane -U; switch-client -Tpane; }
    bind -Tpane Right { select-pane -R; switch-client -Tpane; }
    bind -Tpane Down { select-pane -D; switch-client -Tpane; }
    # Move between panes with hjkl
    bind -Tpane h { select-pane -L; switch-client -Tpane; }
    bind -Tpane k { select-pane -U; switch-client -Tpane; }
    bind -Tpane l { select-pane -R; switch-client -Tpane; }
    bind -Tpane j { select-pane -D; switch-client -Tpane; }
    # Close the current pane
    bind -Tpane q { kill-pane; }
    # Create a new pane
    bind -Tpane s { split-pane -v -c "#{pane_current_path}"; }
    bind -Tpane v { split-pane -h -c "#{pane_current_path}"; }
    # Zoom into pane
    bind -Tpane z { resize-pane -Z; }
    # Identify panes
    bind -Tpane i { display-panes; }
  # --------------------
  # Resize mode keybinds
  # --------------------
    bind -n M-W { switch-client -Tresize; }
    bind -Tresize Left { resize-pane -L 2; switch-client -Tresize; }
    bind -Tresize Up { resize-pane -U; switch-client -Tresize; }
    bind -Tresize Right { resize-pane -R 2; switch-client -Tresize; }
    bind -Tresize Down { resize-pane -D; switch-client -Tresize; }
    bind -Tresize h { resize-pane -L 2; switch-client -Tresize; }
    bind -Tresize k { resize-pane -U; switch-client -Tresize; }
    bind -Tresize l { resize-pane -R 2; switch-client -Tresize; }
    bind -Tresize j { resize-pane -D; switch-client -Tresize; }
  # --------------------
  # Window mode keybinds
  # --------------------
    bind -n M-t { switch-client -Twindow; }
    # Move between windows
    bind -Twindow [ { previous-window; switch-client -Twindow; }
    bind -Twindow ] { next-window; switch-client -Twindow; }
    bind -Twindow \{ { previous-window; switch-client -Twindow; }
    bind -Twindow \} { next-window; switch-client -Twindow; }
    # Go to window by number
    bind -Twindow 1 { select-window -t 1; switch-client -Twindow; }
    bind -Twindow 2 { select-window -t 2; switch-client -Twindow; }
    bind -Twindow 3 { select-window -t 3; switch-client -Twindow; }
    bind -Twindow 4 { select-window -t 4; switch-client -Twindow; }
    bind -Twindow 5 { select-window -t 5; switch-client -Twindow; }
    bind -Twindow 6 { select-window -t 6; switch-client -Twindow; }
    bind -Twindow 7 { select-window -t 7; switch-client -Twindow; }
    bind -Twindow 8 { select-window -t 8; switch-client -Twindow; }
    bind -Twindow 9 { select-window -t 9; switch-client -Twindow; }
    # Create a new window
    bind -Twindow n { new-window -c "#{pane_current_path}"; }
    # Close the current window
    bind -Twindow q { kill-window; }
    # Rename the current window
    bind -Twindow r { command-prompt "rename-window %%"; }
  # ---------------------
  # Session mode keybinds
  # ---------------------
    bind -n M-S { switch-client -Tsession; }
    # Rename the current session
    bind -Tsession r { command-prompt "rename-session %%"; }
    # Create a new session
    bind -Tsession n { command-prompt "new-session -A -s %%"; }
    # Close the current session
    bind -Tsession q { kill-session; }
  # -----------------------
  # Resurrect mode keybinds
  # -----------------------
    bind -n M-R { switch-client -Tresurrect; }
    # Save current environment
    bind -Tresurrect s { run "#{@plugins_dir}/tmux-resurrect/scripts/save.sh"; }
    # Restore last saved environment
    bind -Tresurrect r { run "#{@plugins_dir}/tmux-resurrect/scripts/restore.sh"; }
  # ---------------------
  # Plugins mode keybinds
  # ---------------------
    bind -n M-p { switch-client -Tplugins; }
    # Install plugins
    bind -Tplugins i { run "#{@plugins_dir}/tpm/bindings/install_plugins"; }
    # Update plugins
    bind -Tplugins u { run "#{@plugins_dir}/tpm/bindings/update_plugins"; }
    # Clean plugins
    bind -Tplugins c { run "#{@plugins_dir}/tpm/bindings/clean_plugins"; }
  # ----------------------------------------------
  # Integration with mrjones2014/smart-splits.nvim
  # ----------------------------------------------
    # OPT+hjkl
    bind -n M-h if -F "#{@pane-is-vim}" { send M-h; } { select-pane -L; }
    bind -n M-j if -F "#{@pane-is-vim}" { send M-j; } { select-pane -D; }
    bind -n M-k if -F "#{@pane-is-vim}" { send M-k; } { select-pane -U; }
    bind -n M-l if -F "#{@pane-is-vim}" { send M-l; } { select-pane -R; }
    # OPT+HJKL
    bind -n M-H if -F "#{@pane-is-vim}" { send M-H; } { select-pane -L; }
    bind -n M-J if -F "#{@pane-is-vim}" { send M-J; } { select-pane -D; }
    bind -n M-K if -F "#{@pane-is-vim}" { send M-K; } { select-pane -U; }
    bind -n M-L if -F "#{@pane-is-vim}" { send M-L; } { select-pane -R; }
    # OPT+SHIFT+ARROW
    bind -n M-S-Left if -F "#{@pane-is-vim}" { send M-S-Left; } { select-pane -L; }
    bind -n M-S-Down if -F "#{@pane-is-vim}" { send M-S-Down; } { select-pane -D; }
    bind -n M-S-Up if -F "#{@pane-is-vim}" { send M-S-Up; } { select-pane -U; }
    bind -n M-S-Right if -F "#{@pane-is-vim}" { send M-S-Right; } { select-pane -R; }

# =======
# Plugins
# =======
  set -g @plugin 'tmux-plugins/tpm'
  set -g @plugin 'tmux-plugins/tmux-sensible'
  set -g @plugin 'nhdaly/tmux-better-mouse-mode'
  set -g @plugin 'tmux-plugins/tmux-yank'
  set -g @plugin 'tmux-plugins/tmux-resurrect'
  set -g @plugin 'tmux-plugins/tmux-continuum'
  set -g @plugin 'Morantron/tmux-fingers'

# ====================
# Plugin configuration
# ====================
  # --------------
  # tmux-continuum
  # --------------
    set -g @continuum-restore 'on'
  # -----------------
  # smart-splits.nvim
  # -----------------
    set -g @smart-splits_no_default_keybinds 1
  # ------------
  # tmux-fingers
  # ------------
    bind -n M-f { run -b "#{@fingers-cli} start #{pane_id}"; }

# ============
# Finalization
# ============
  # -------------------
  # $PATH configuration
  # -------------------
    # Add MacOS ARM Homebrew binaries to $PATH
    if "[ -d '/opt/homebrew/bin/' ]" {
      setenv -g PATH "/opt/homebrew/bin:$PATH"
    }
  # ------------------
  # TPM Initialization
  # ------------------
    # Execute Tmux Package Manager
    run "#{@plugins_dir}/tpm/tpm"
